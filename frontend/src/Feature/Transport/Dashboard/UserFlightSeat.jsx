import React, { useEffect, useState } from 'react';
import { jsPDF } from "jspdf";
import "jspdf-autotable";

const UserFlightSeat = () => {
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  
  // Filter States
  const [filters, setFilters] = useState({
    airTaxiName: '',
    departure: '',
    departureTime: '',
    destination: '',
    destinationTime: '',
    ticketPrice: '',
    bookedSeats: '',
    totalPrice: '',
    email: ''
  });

  useEffect(() => {
    const fetchBookings = async () => {
      try {
        const response = await fetch('http://localhost:5000/api/flightbooking');
        const data = await response.json();
        if (data.success) {
          setBookings(data.bookings);
        }
      } catch (error) {
        console.error('Error fetching bookings:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchBookings();
  }, []);

  const formatDateTime = (dateTimeString) => {
    const date = new Date(dateTimeString);
    const formattedDate = date.toISOString().slice(0, 10); // YYYY-MM-DD
    const formattedTime = date.toTimeString().slice(0, 5); // HH:MM
    return `${formattedDate}, ${formattedTime}`;
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: value
    }));
  };

  const filteredBookings = bookings.filter((booking) => {
    return (
      (booking.airtaxiName && booking.airtaxiName.toLowerCase().includes(filters.airTaxiName.toLowerCase())) &&
      (booking.departure && booking.departure.toLowerCase().includes(filters.departure.toLowerCase())) &&
      (formatDateTime(booking.departure_datetime).toLowerCase().includes(filters.departureTime.toLowerCase())) &&
      (booking.destination && booking.destination.toLowerCase().includes(filters.destination.toLowerCase())) &&
      (formatDateTime(booking.destination_datetime).toLowerCase().includes(filters.destinationTime.toLowerCase())) &&
      (booking.ticket_price && booking.ticket_price.toString().includes(filters.ticketPrice)) &&
      (booking.bookedSeats && booking.bookedSeats.join(', ').toLowerCase().includes(filters.bookedSeats.toLowerCase())) &&
      (booking.totalPrice && booking.totalPrice.toString().includes(filters.totalPrice)) &&
      (booking.email && booking.email.toLowerCase().includes(filters.email.toLowerCase()))
    );
  });
  

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.setFont("helvetica", "bold");

    // Title
    doc.setFontSize(20);
    const title = "Flight Bookings".toUpperCase();  // Convert text to uppercase
    doc.text(title, 105, 20, null, null, "center");

    // Table headers
    const tableColumn = [
      "Air Taxi Name", 
      "Departure", 
      "Departure Time", 
      "Destination", 
      "Destination Time", 
      "Ticket Price",
      "Booked Seats", 
      "Total Price", 
      "Email"
    ];

    // Prepare table rows
    const tableRows = filteredBookings.map((booking) => [
      booking.airtaxiName,
      booking.departure,
      formatDateTime(booking.departure_datetime),
      booking.destination,
      formatDateTime(booking.destination_datetime),
      booking.ticket_price,
      booking.bookedSeats.join(', '),
      booking.totalPrice,
      booking.email
    ]);

    // Generate table
    doc.autoTable({
      head: [tableColumn],
      body: tableRows,
      startY: 50, 
      headStyles: {
        fillColor: [82, 2, 153], 
        textColor: [255, 255, 255], 
        fontStyle: 'bold', 
      },
      bodyStyles: {
        fillColor: [245, 245, 245], 
        textColor: [0, 0, 0], 
      },
      margin: { top: 30, bottom: 30 },
    });

    // Generated date and time
    const generatedDate = new Date().toLocaleString();
    doc.setFontSize(10);
    doc.text(`Generated on: ${generatedDate}`, 105, doc.lastAutoTable.finalY + 30, null, null, "center");

    // Footer (Generated By)
    doc.text("Generated By: Transport Manager - Thivyan", 105, doc.lastAutoTable.finalY + 40, null, null, "center");

    // Save PDF
    doc.save("flight_bookings.pdf");
  };

  if (loading) {
    return <div className="text-center p-10">Loading bookings...</div>;
  }

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6 text-center">Flight Bookings</h1>

      {/* Filter Section */}
      <div className="mb-4">
        <input
          type="text"
          name="airTaxiName"
          value={filters.airTaxiName}
          onChange={handleFilterChange}
          placeholder="Filter by Air Taxi Name"
          className="p-2 border rounded m-2"
        />
        <input
          type="text"
          name="departure"
          value={filters.departure}
          onChange={handleFilterChange}
          placeholder="Filter by Departure"
          className="p-2 border rounded m-2"
        />
        <input
          type="text"
          name="departureTime"
          value={filters.departureTime}
          onChange={handleFilterChange}
          placeholder="Filter by Departure Time"
          className="p-2 border rounded m-2"
        />
        <input
          type="text"
          name="destination"
          value={filters.destination}
          onChange={handleFilterChange}
          placeholder="Filter by Destination"
          className="p-2 border rounded m-2"
        />
        <input
          type="text"
          name="destinationTime"
          value={filters.destinationTime}
          onChange={handleFilterChange}
          placeholder="Filter by Destination Time"
          className="p-2 border rounded m-2"
        />
        <input
          type="text"
          name="ticketPrice"
          value={filters.ticketPrice}
          onChange={handleFilterChange}
          placeholder="Filter by Ticket Price"
          className="p-2 border rounded m-2"
        />
        <input
          type="text"
          name="bookedSeats"
          value={filters.bookedSeats}
          onChange={handleFilterChange}
          placeholder="Filter by Booked Seats"
          className="p-2 border rounded m-2"
        />
        <input
          type="text"
          name="totalPrice"
          value={filters.totalPrice}
          onChange={handleFilterChange}
          placeholder="Filter by Total Price"
          className="p-2 border rounded m-2"
        />
        <input
          type="text"
          name="email"
          value={filters.email}
          onChange={handleFilterChange}
          placeholder="Filter by Email"
          className="p-2 border rounded m-2"
        />
        <button
          onClick={generatePDF}
          className="bg-purple-900 text-white rounded-full p-2 m-2 w-50"
        >
          Download as PDF
        </button>
      </div>

      {/* Table to Display Data */}
      <div className="overflow-x-auto mt-10">
        <table className="min-w-full bg-white border border-gray-300">
          <thead>
            <tr className="bg-gray-200">
              <th className="border px-4 py-2">Air Taxi Name</th>
              <th className="border px-4 py-2">Departure</th>
              <th className="border px-4 py-2">Departure Time</th>
              <th className="border px-4 py-2">Destination</th>
              <th className="border px-4 py-2">Destination Time</th>
              <th className="border px-4 py-2">Ticket Price</th>
              <th className="border px-4 py-2">Booked Seats</th>
              <th className="border px-4 py-2">Total Price</th>
              <th className="border px-4 py-2">Email</th>
            </tr>
          </thead>
          <tbody>
            {filteredBookings.map((booking, index) => (
              <tr key={booking._id} className="hover:bg-gray-50">
                <td className="py-2 px-4 border">{booking.airtaxiName}</td>
                <td className="py-2 px-4 border">{booking.departure}</td>
                <td className="py-2 px-4 border">{formatDateTime(booking.departure_datetime)}</td>
                <td className="py-2 px-4 border">{booking.destination}</td>
                <td className="py-2 px-4 border">{formatDateTime(booking.destination_datetime)}</td>
                <td className="py-2 px-4 border">{booking.ticket_price}</td>
                <td className="py-2 px-4 border">
                  {booking.bookedSeats.join(', ')}
                </td>
                <td className="py-2 px-4 border">{booking.totalPrice}</td>
                <td className="py-2 px-4 border">{booking.email}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default UserFlightSeat;
