import React, { useState, useEffect } from "react";
import axios from "axios";
import { jsPDF } from "jspdf";
import "jspdf-autotable"; // Import the jsPDF AutoTable plugin
import logo from "../../../assets/logo.png"; // Import the logo image
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css"; // Import DatePicker styles

const AirSeatsTable = () => {
  const [airSeats, setAirSeats] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [departureFilter, setDepartureFilter] = useState("");
  const [departureDatetimeFilter, setDepartureDatetimeFilter] = useState(null); // Updated to Date object
  const [destinationFilter, setDestinationFilter] = useState("");
  const [destinationDatetimeFilter, setDestinationDatetimeFilter] = useState(null); // Updated to Date object

  useEffect(() => {
    const fetchAirSeats = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/airSeats");
        setAirSeats(response.data);
      } catch (error) {
        console.error("Error fetching air seats data", error);
      }
    };

    fetchAirSeats();
  }, []);

  // Filter the data based on the search query and individual filters
  const filteredData = airSeats.filter((seat) => {
    const { airtaxiName, departure, departure_datetime, destination, destination_datetime, ticket_price } = seat;

    const searchMatch =
      airtaxiName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      departure.toLowerCase().includes(searchQuery.toLowerCase()) ||
      departure_datetime.includes(searchQuery) ||
      destination.toLowerCase().includes(searchQuery.toLowerCase()) ||
      destination_datetime.includes(searchQuery) ||
      ticket_price.toString().includes(searchQuery);

    const departureMatch = departureFilter ? departure.toLowerCase().includes(departureFilter.toLowerCase()) : true;
    const departureDatetimeMatch = departureDatetimeFilter
      ? new Date(departure_datetime).toDateString() === departureDatetimeFilter.toDateString()
      : true;
    const destinationMatch = destinationFilter ? destination.toLowerCase().includes(destinationFilter.toLowerCase()) : true;
    const destinationDatetimeMatch = destinationDatetimeFilter
      ? new Date(destination_datetime).toDateString() === destinationDatetimeFilter.toDateString()
      : true;

    return (
      searchMatch &&
      departureMatch &&
      departureDatetimeMatch &&
      destinationMatch &&
      destinationDatetimeMatch
    );
  });

  // Generate PDF for AirSeatsTable
  const generatePDF = () => {
    const doc = new jsPDF();

    doc.setFont("helvetica", "bold");

    // Add logo
    doc.addImage(logo, "PNG", 10, 10, 20, 20); 

    // Title
    doc.setFontSize(20);
    const title = "Air Seats List".toUpperCase();  // Convert text to uppercase
    doc.text(title, 105, 20, null, null, "center");

    // Table headers
    const tableColumn = [
      "Airtaxi Name", 
      "Departure", 
      "Departure Date & Time", 
      "Destination", 
      "Destination Date & Time", 
      "Ticket Fee (LKR)",
      "Booked Seats"
    ];

    // Prepare table rows
    const tableRows = filteredData.map((seat) => [
      seat.airtaxiName,
      seat.departure,
      new Date(seat.departure_datetime).toLocaleString(),
      seat.destination,
      new Date(seat.destination_datetime).toLocaleString(),
      seat.ticket_price + " LKR",
      seat.bookedSeats && seat.bookedSeats.length > 0 ? seat.bookedSeats.join(", ") : "No Seats Booked"
    ]);

    // Generate table
    if (doc.autoTable) {
      doc.autoTable({
        head: [tableColumn],
        body: tableRows,
        startY: 50, 
        headStyles: {
          fillColor: [82, 2, 153], 
          textColor: [255, 255, 255], 
          fontStyle: 'bold', 
        },
        bodyStyles: {
          fillColor: [245, 245, 245], 
          textColor: [0, 0, 0], 
        },
        margin: { top: 30, bottom: 30 },
      });

      // Generated date and time
      const generatedDate = new Date().toLocaleString();
      doc.setFontSize(10);
      doc.text(`Generated on: ${generatedDate}`, 105, doc.lastAutoTable.finalY + 30, null, null, "center");

      // Footer (Generated By)
      doc.text("Generated By: Transport Manager - Thivyan", 105, doc.lastAutoTable.finalY + 40, null, null, "center");

      // Save PDF
      doc.save("air_seats_list.pdf");
    } else {
      console.error("autoTable is not available.");
    }
  };

  return (
    <div className="px-6 mt-8">
      {/* Search and Filter Section */}
      <div className="mb-3 flex gap-4">
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search All Data"
          className="p-3 border rounded-full w-50"
        />

        <input
          type="text"
          value={departureFilter}
          onChange={(e) => setDepartureFilter(e.target.value)}
          placeholder="Departure"
          className="p-3 border rounded-full w-50"
        />

        {/* Departure Datetime Filter - Calendar DatePicker */}
        <DatePicker
          selected={departureDatetimeFilter}
          onChange={(date) => setDepartureDatetimeFilter(date)}
          placeholderText="Departure Date"
          className="p-3 border rounded-full w-40"
        />

        <input
          type="text"
          value={destinationFilter}
          onChange={(e) => setDestinationFilter(e.target.value)}
          placeholder="Destination"
          className="p-3 border rounded-full w-50"
        />

        {/* Destination Datetime Filter - Calendar DatePicker */}
        <DatePicker
          selected={destinationDatetimeFilter}
          onChange={(date) => setDestinationDatetimeFilter(date)}
          placeholderText="Destination Date"
          className="p-3 border rounded-full w-40"
        />

        <button
        onClick={generatePDF}
        className="bg-purple-900 text-white  rounded-full w-60"
      >
        Download as PDF
      </button>
      </div>

      {/* PDF Download Button */}
      

      {/* Table to Display Data */}
      <div className="overflow-x-auto mt-10">
        <table className="min-w-full bg-white border border-gray-300">
          <thead>
            <tr className="bg-gray-200">
              <th className="border px-4 py-2">Airtaxi Name</th>
              <th className="border px-4 py-2">Departure</th>
              <th className="border px-4 py-2">Departure Date & Time</th>
              <th className="border px-4 py-2">Destination</th>
              <th className="border px-4 py-2">Destination Date & Time</th>
              <th className="border px-4 py-2">Ticket Fee (LKR)</th>
              <th className="border px-4 py-2">Booked Seats</th>
            </tr>
          </thead>
          <tbody>
            {filteredData.map((seat) => (
              <tr key={seat._id} className="text-center">
                <td className="border px-4 py-2">{seat.airtaxiName}</td>
                <td className="border px-4 py-2">{seat.departure}</td>
                <td className="border px-4 py-2">{new Date(seat.departure_datetime).toLocaleString()}</td>
                <td className="border px-4 py-2">{seat.destination}</td>
                <td className="border px-4 py-2">{new Date(seat.destination_datetime).toLocaleString()}</td>
                <td className="border px-4 py-2">{seat.ticket_price} LKR</td>
                <td className="border px-4 py-2">
                  {seat.bookedSeats && seat.bookedSeats.length > 0 ? seat.bookedSeats.join(", ") : "No Seats Booked"}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AirSeatsTable;
