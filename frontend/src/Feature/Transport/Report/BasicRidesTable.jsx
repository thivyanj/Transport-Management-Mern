import React, { useState, useEffect } from "react";
import axios from "axios";
import { jsPDF } from "jspdf";
import "jspdf-autotable"; // Import the jsPDF AutoTable plugin
import logo from "../../../assets/logo.png"; // Import the logo image
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css"; // Import DatePicker styles

const BasicRidesTable = () => {
  const [rides, setRides] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [pickupLocationFilter, setPickupLocationFilter] = useState("");
  const [emailFilter, setEmailFilter] = useState("");
  const [passengerCountFilter, setPassengerCountFilter] = useState("");
  const [selectedDateTimeFilter, setSelectedDateTimeFilter] = useState(null); // Updated to Date object
  const [vehicleTypeFilter, setVehicleTypeFilter] = useState("");

  useEffect(() => {
    const fetchRides = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/rides/ridebookings");
        setRides(response.data);
      } catch (error) {
        console.error("Error fetching ride bookings data", error);
      }
    };

    fetchRides();
  }, []);

  // Filter the data based on the search query and individual filters
  const filteredData = rides.filter((ride) => {
    const { pickupLocation, email, passengerCount, selectedDateTime, vehicleType } = ride;

    const searchMatch =
      pickupLocation.toLowerCase().includes(searchQuery.toLowerCase()) ||
      email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      passengerCount.toString().includes(searchQuery) ||
      vehicleType.toLowerCase().includes(searchQuery);

    const pickupLocationMatch = pickupLocationFilter ? pickupLocation.toLowerCase().includes(pickupLocationFilter.toLowerCase()) : true;
    const emailMatch = emailFilter ? email.toLowerCase().includes(emailFilter.toLowerCase()) : true;
    const passengerCountMatch = passengerCountFilter ? passengerCount.toString().includes(passengerCountFilter) : true;
    const selectedDateTimeMatch = selectedDateTimeFilter
      ? new Date(selectedDateTime).toDateString() === selectedDateTimeFilter.toDateString()
      : true;
    const vehicleTypeMatch = vehicleTypeFilter ? vehicleType.toLowerCase().includes(vehicleTypeFilter.toLowerCase()) : true;

    return (
      searchMatch &&
      pickupLocationMatch &&
      emailMatch &&
      passengerCountMatch &&
      selectedDateTimeMatch &&
      vehicleTypeMatch
    );
  });

  // Generate PDF for BasicRidesTable
  const generatePDF = () => {
    const doc = new jsPDF();

    doc.setFont("helvetica", "bold");

    // Add logo
    doc.addImage(logo, "PNG", 10, 10, 20, 20);

    // Title
    doc.setFontSize(20);
    const title = "Basic Rides List".toUpperCase();  // Convert text to uppercase
    doc.text(title, 105, 20, null, null, "center");

    // Table headers
    const tableColumn = [
      "Pickup Location",
      "Email",
      "Passenger Count",
      "Selected Date & Time",
      "Vehicle Type"
    ];

    // Prepare table rows
    const tableRows = filteredData.map((ride) => [
      ride.pickupLocation,
      ride.email,
      ride.passengerCount,
      new Date(ride.selectedDateTime).toLocaleString(),
      ride.vehicleType
    ]);

    // Generate table
    if (doc.autoTable) {
      doc.autoTable({
        head: [tableColumn],
        body: tableRows,
        startY: 50,
        headStyles: {
          fillColor: [82, 2, 153],
          textColor: [255, 255, 255],
          fontStyle: 'bold',
        },
        bodyStyles: {
          fillColor: [245, 245, 245],
          textColor: [0, 0, 0],
        },
        margin: { top: 30, bottom: 30 },
      });

      // Generated date and time
      const generatedDate = new Date().toLocaleString();
      doc.setFontSize(10);
      doc.text(`Generated on: ${generatedDate}`, 105, doc.lastAutoTable.finalY + 30, null, null, "center");

      // Footer (Generated By)
      doc.text("Generated By: Transport Manager - Thivyan", 105, doc.lastAutoTable.finalY + 40, null, null, "center");

      // Save PDF
      doc.save("basic_rides_list.pdf");
    } else {
      console.error("autoTable is not available.");
    }
  };

  return (
    <div className="px-6 mt-8">
      {/* Search and Filter Section */}
      <div className="mb-3 flex gap-4">
        

        <input
          type="text"
          value={pickupLocationFilter}
          onChange={(e) => setPickupLocationFilter(e.target.value)}
          placeholder="Pickup Location"
          className="p-3 border rounded-full w-50"
        />

        <input
          type="text"
          value={emailFilter}
          onChange={(e) => setEmailFilter(e.target.value)}
          placeholder="Email"
          className="p-3 border rounded-full w-50"
        />

        <input
          type="text"
          value={passengerCountFilter}
          onChange={(e) => setPassengerCountFilter(e.target.value)}
          placeholder="Passenger Count"
          className="p-3 border rounded-full w-50"
        />

        {/* Selected DateTime Filter - Calendar DatePicker */}
        <DatePicker
          selected={selectedDateTimeFilter}
          onChange={(date) => setSelectedDateTimeFilter(date)}
          placeholderText="Selected Date"
          className="p-3 border rounded-full w-40"
        />

        <input
          type="text"
          value={vehicleTypeFilter}
          onChange={(e) => setVehicleTypeFilter(e.target.value)}
          placeholder="Vehicle Type"
          className="p-3 border rounded-full w-50"
        />

        <button
          onClick={generatePDF}
          className="bg-purple-900 text-white rounded-full w-60"
        >
          Download as PDF
        </button>
      </div>

      {/* Table to Display Data */}
      <div className="overflow-x-auto mt-10">
        <table className="min-w-full bg-white border border-gray-300">
          <thead>
            <tr className="bg-gray-200">
              <th className="border px-4 py-2">Pickup Location</th>
              <th className="border px-4 py-2">Email</th>
              <th className="border px-4 py-2">Passenger Count</th>
              <th className="border px-4 py-2">Selected Date & Time</th>
              <th className="border px-4 py-2">Vehicle Type</th>
            </tr>
          </thead>
          <tbody>
            {filteredData.map((ride) => (
              <tr key={ride._id} className="text-center">
                <td className="border px-4 py-2">{ride.pickupLocation}</td>
                <td className="border px-4 py-2">{ride.email}</td>
                <td className="border px-4 py-2">{ride.passengerCount}</td>
                <td className="border px-4 py-2">{new Date(ride.selectedDateTime).toLocaleString()}</td>
                <td className="border px-4 py-2">{ride.vehicleType}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default BasicRidesTable;
